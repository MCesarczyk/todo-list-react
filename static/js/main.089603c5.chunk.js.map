{"version":3,"sources":["features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/languages/Switcher/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","features/languages/languages.js","features/tasks/Tasks.js","useLocalStorageState.js","App.js","reportWebVitals.js","GlobalStyle.js","store.js","index.js","theme.js"],"names":["tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","index","findIndex","id","done","removeTask","splice","setAllDone","forEach","task","actions","selectTasks","FormComponent","styled","form","theme","color","background","breakpoint","tabletMax","FormInput","input","borders","Button","button","fontLight","primary","Form","inputPlaceholder","formButtonInnerText","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedContent","trim","content","nanoid","current","focus","ref","value","placeholder","onChange","target","autoFocus","Switcher","languages","setLanguage","onLanguageChange","Object","keys","map","key","onClick","StyledTaskList","ul","ListItem","li","TaskContent","span","css","toggleDone","shadows","remove","TaskList","useSelector","hidden","Element","div","mobileMax","disabled","Buttons","setDoneButtonInnerText","toggleButtonInnerTextHidden","toggleButtonInnerTextVisible","length","every","SectionContainer","section","HeaderContainer","Header","h2","Section","title","body","extraHeaderContent","EN","headerTitle","sectionTitle","tasksSectionTitle","PL","Tasks","keyName","initialValue","localStorage","getItem","JSON","parse","setState","useEffect","setItem","stringify","useLocalStorageState","language","document","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","App","getElementById"],"mappings":"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","file":"static/js/main.089603c5.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        toggleHideDone: (state) => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(({ id }) => id === payload);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(({ id }) => id === payload);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(({ id }) => id === payload);\r\n            tasks.forEach((task, index) => {\r\n                tasks[index].done = true;\r\n            })\r\n        },\r\n    },\r\n});\r\n\r\nexport const { addTask, toggleHideDone, toggleTaskDone, removeTask, setAllDone } = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const FormComponent = styled.form`\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    padding: 10px;\r\n    display: flex;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const FormInput = styled.input`\r\n    border: solid 1px ${({ theme }) => theme.color.borders};\r\n    padding: 10px;\r\n    flex-grow: 1;\r\n    margin: 10px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    display: flex;\r\n    align-content: center;\r\n    justify-content: center;\r\n    color: ${({ theme }) => theme.color.fontLight};\r\n    background-color: ${({ theme }) => theme.color.primary};\r\n    border: none;\r\n    padding: 5px;\r\n    padding: 10px;\r\n    margin: 10px;\r\n    transition: background 0.5s, transform 1s;\r\n\r\n    &:hover {\r\n        filter: brightness(130%);\r\n        transform: scale(1.05);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(160%);\r\n        box-shadow: inset 1px 1px 2px darkgrey;\r\n    }\r\n`;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { FormComponent, FormInput, Button } from \"./styled\";\r\n\r\nconst Form = ({ inputPlaceholder, formButtonInnerText }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const trimmedContent = newTaskContent.trim();\r\n        if (trimmedContent === \"\") {\r\n            setNewTaskContent(\"\");\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: trimmedContent,\r\n            done: false,\r\n            id: nanoid()\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <FormComponent onSubmit={onFormSubmit}>\r\n            <FormInput\r\n                ref={inputRef}\r\n                value={newTaskContent}\r\n                placeholder={inputPlaceholder}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n                autoFocus\r\n            />\r\n            <Button>{formButtonInnerText}</Button>\r\n        </FormComponent>\r\n    )\r\n};\r\n\r\nexport default Form;","const Switcher = ({ languages, setLanguage }) => {\r\n\r\n    const onLanguageChange = ({ target }) => {\r\n        setLanguage(target.value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {Object.keys(languages).map((key) => (\r\n                <button\r\n                    key={key}\r\n                    value={key}\r\n                    onClick={onLanguageChange}\r\n                >\r\n                    {key}\r\n                </button>\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Switcher;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledTaskList = styled.ul`\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    padding: 15px;\r\n    list-style-type: none;\r\n    width: 100%;\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n    display: grid;\r\n    grid-gap: 10px;\r\n    grid-template-columns: auto 1fr auto;\r\n    align-items: center;\r\n    padding: 6px;\r\n    border-style: solid;\r\n    border-width: 0px 0px 1px 0px;\r\n    border-color: ${({ theme }) => theme.color.borders};\r\n`;\r\n\r\nexport const TaskContent = styled.span`\r\n    word-break: break-all;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-content: center;\r\n    color: ${({ theme }) => theme.color.fontLight};\r\n    border: none;\r\n    padding: 5px;\r\n    width: 28px;\r\n    height: 28px;\r\n    transition: 0.5s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.color.toggleDone};\r\n\r\n        &:hover {\r\n            filter: brightness(130%);\r\n        }\r\n\r\n        &:active {\r\n            filter: brightness(160%);\r\n            box-shadow: inset 1px 1px 3px ${({ theme }) => theme.color.shadows};\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.remove};\r\n\r\n        &:hover {\r\n            filter: brightness(130%);\r\n        }\r\n\r\n        &:active {\r\n            filter: brightness(160%);\r\n            box-shadow: inset 1px 1px 3px ${({ theme }) => theme.color.shadows};\r\n        }\r\n    `}\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice\";\r\nimport { StyledTaskList, ListItem, TaskContent, Button } from \"./styled\";\r\n\r\nconst TaskList = () => {\r\n  const { tasks, hideDone } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <StyledTaskList>\r\n      {tasks.map(task => (\r\n        <ListItem\r\n          key={task.id}\r\n          hidden={task.done && hideDone}\r\n        >\r\n          <Button\r\n            toggleDone\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n          >\r\n            {task.done ? \"✔\" : \" \"}\r\n          </Button>\r\n          <TaskContent done={task.done}>\r\n            {task.content}\r\n          </TaskContent>\r\n          <Button\r\n            remove\r\n            onClick={() => dispatch(removeTask(task.id))}\r\n          >\r\n            🗑\r\n          </Button>\r\n        </ListItem>\r\n      ))}\r\n    </StyledTaskList>\r\n  )\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const Element = styled.div`\r\n    display: grid;\r\n    gap: 10px;\r\n    grid-template-columns: auto auto;\r\n    \r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.color.primary};\r\n    font-weight: 400;\r\n    background-color: transparent;\r\n    border: none;\r\n    transition: 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.disabled};\r\n        cursor: unset;\r\n    }\r\n`;\r\n\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, setAllDone } from \"../tasksSlice\";\r\nimport { Element, Button } from \"./styled\";\r\n\r\nconst Buttons = ({\r\n    setDoneButtonInnerText,\r\n    toggleButtonInnerTextHidden,\r\n    toggleButtonInnerTextVisible\r\n}) => {\r\n    const { tasks, hideDone } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <Element>\r\n            {tasks.length > 0 && (\r\n                <>\r\n                    <Button onClick={() => dispatch(toggleHideDone())}>\r\n                        {hideDone ? toggleButtonInnerTextHidden : toggleButtonInnerTextVisible}\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={tasks.every(({ done }) => done)}\r\n                    >\r\n                        {setDoneButtonInnerText}\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Element>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const SectionContainer = styled.section`\r\n    margin-bottom: 10px;\r\n`;\r\n\r\nexport const HeaderContainer = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto auto;\r\n    gap: 10px;\r\n    align-items: center;\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    padding-right: 10px;\r\n    margin: 0 0 1px 0;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}) {\r\n        grid-template-columns: 1fr;\r\n        justify-content: center;\r\n    }\r\n`;\r\n\r\nexport const Header = styled.h2`\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    padding: 15px;\r\n    font-weight: 700;\r\n    font-size: 20px;\r\n    margin: 0 0 1px 0;\r\n`;","import { SectionContainer, HeaderContainer, Header } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <SectionContainer>\r\n        <HeaderContainer>\r\n            <Header>\r\n                {title}\r\n            </Header>\r\n            {extraHeaderContent}\r\n        </HeaderContainer>\r\n        {body}\r\n    </SectionContainer>\r\n);\r\n\r\nexport default Section;","const Header = ({ title }) => (\r\n  <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;","const languages = {\r\n  EN: {\r\n    headerTitle: \"To-do list\",\r\n    sectionTitle: \"Add new task\",\r\n    tasksSectionTitle: \"List of tasks\",\r\n    inputPlaceholder: \"What are you going to do?\",\r\n    formButtonInnerText: \"Add task\",\r\n    setDoneButtonInnerText: \"Finish all\",\r\n    toggleButtonInnerTextHidden: \"Show done\",\r\n    toggleButtonInnerTextVisible: \"Hide done\"\r\n  },\r\n  PL: {\r\n    headerTitle: \"Lista zadań\",\r\n    sectionTitle: \"Dodaj nowe zadanie\",\r\n    tasksSectionTitle: \"Lista zadań\",\r\n    inputPlaceholder: \"Co jest do zrobienia?\",\r\n    formButtonInnerText: \"Dodaj zadanie\",\r\n    setDoneButtonInnerText: \"Ukończ wszystkie\",\r\n    toggleButtonInnerTextHidden: \"Pokaż ukończone\",\r\n    toggleButtonInnerTextVisible: \"Ukryj ukończone\"\r\n  }\r\n};\r\n\r\nexport default languages;","import { useLocalStorageState } from '../../useLocalStorageState';\nimport Form from \"./Form\";\nimport Switcher from \"../languages/Switcher\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from '../../common/Header';\nimport languages from \"../languages/languages\";\n\nfunction Tasks() {\n  const [language, setLanguage] = useLocalStorageState(\"language\", \"EN\");\n\n  document.title = languages[language].headerTitle;\n\n  return (\n    <main>\n      <Header title={languages[language].headerTitle} />\n      <Section\n        title={languages[language].sectionTitle}\n        body={\n          <Form\n            inputPlaceholder={languages[language].inputPlaceholder}\n            formButtonInnerText={languages[language].formButtonInnerText}\n          />\n        }\n        extraHeaderContent={\n          <Switcher\n            languages={languages}\n            language={language}\n            setLanguage={setLanguage}\n          />\n        }\n      />\n      <Section\n        title={languages[language].tasksSectionTitle}\n        body={\n          <TaskList />\n        }\n        extraHeaderContent={\n          <Buttons\n            setDoneButtonInnerText={languages[language].setDoneButtonInnerText}\n            toggleButtonInnerTextVisible={languages[language].toggleButtonInnerTextVisible}\n            toggleButtonInnerTextHidden={languages[language].toggleButtonInnerTextHidden}\n          />\n        }\n      />\n    </main>\n  );\n}\n\nexport default Tasks;","import { useState, useEffect } from \"react\";\r\n\r\nexport const useLocalStorageState = (keyName, initialValue) => {\r\n    const getInitialState = () => {\r\n        const localStorageState = localStorage.getItem(keyName);\r\n        if (localStorageState === null) {\r\n            return initialValue;\r\n        }\r\n\r\n        return JSON.parse(localStorage.getItem(keyName));\r\n    };\r\n    const [state, setState] = useState(getInitialState);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(keyName, JSON.stringify(state))\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [state]);\r\n\r\n    return [state, setState];\r\n};","import Tasks from \"./features/tasks/Tasks\";\r\n\r\nexport default () => <Tasks />;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\nhtml {\r\n  box-sizing: border-box;\r\n}\r\n\r\n*, ::after, ::before {\r\n  box-sizing: inherit;\r\n}\r\n\r\nbody {\r\n  background-color: #eee;\r\n  max-width: 1024px;\r\n  min-width: 320px;\r\n  margin: 0 auto;\r\n  padding: 10px;\r\n  font-family: 'Montserrat', sans-serif;\r\n  font-size: 14 px;\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n}`;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Normalize } from \"styled-normalize\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from 'react-redux';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <Normalize />\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    color: {\r\n        primary: \"teal\",\r\n        background: \"#fff\",\r\n        fontLight: \"#fff\",\r\n        disabled: \"#ccc\",\r\n        borders: \"#ddd\",\r\n        shadows: \"darkgrey\",\r\n        toggleDone: \"forestgreen\",\r\n        remove: \"crimson\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: \"480px\",\r\n        tabletMax: \"768px\",\r\n    },\r\n}"],"sourceRoot":""}