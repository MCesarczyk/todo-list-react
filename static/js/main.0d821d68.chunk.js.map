{"version":3,"sources":["features/tasks/input/index.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPage/Form/styled.js","features/tasks/TasksPage/Form/index.js","features/languages/languageSlice.js","features/languages/Switcher/styled.js","features/languages/Switcher/index.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/styled.js","features/tasks/TasksPage/Buttons/index.js","common/HeaderContainer/index.js","common/Section/styled.js","common/Section/index.js","features/languages/descriptions.js","common/Header/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","features/author/AuthorPage.js","styled.js","App.js","reportWebVitals.js","GlobalStyle.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","store.js","index.js","theme.js"],"names":["Input","styled","input","theme","color","borders","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","state","reducers","addTask","task","payload","push","toggleHideDone","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","forEach","fetchExampleTasks","setTasks","setTasksState","stateName","actions","selectTasks","selectHideDone","selectState","FormComponent","form","background","breakpoint","tabletMax","Button","button","fontLight","primary","Form","inputPlaceholder","formButtonInnerText","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedContent","trim","content","nanoid","current","focus","ref","value","placeholder","onChange","target","autoFocus","languageSlice","language","changeLanguage","chosenLanguage","selectLanguage","languages","fontDark","Switcher","descriptions","Object","keys","map","key","onClick","StyledTaskList","ul","ListItem","li","TaskContent","span","css","toggleDone","shadows","remove","TaskList","location","useLocation","query","URLSearchParams","search","get","useSelector","filter","toUpperCase","includes","selectTasksByQuery","hidden","to","Element","div","mobileMax","disabled","Buttons","setDoneButtonInnerText","toggleButtonInnerTextHidden","toggleButtonInnerTextVisible","length","every","HeaderContainer","SectionContainer","section","Header","h2","Section","title","body","extraHeaderContent","EN","headerTitle","sectionTitle","tasksSectionTitle","getExampleTasksButtonText","PL","Wrapper","Search","history","useHistory","searchParams","set","delete","pathname","toString","replaceQueryParameter","undefined","TasksPage","document","TaskPage","useParams","find","getTasksById","AuthorPage","activeClassName","StyledNavLink","NavLink","attrs","props","StyledNavBeam","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","put","delay","call","exampleTasks","alert","select","takeLatest","type","takeEvery","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","languageReducer","middleware","run","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0d821d68.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Input = styled.input`\r\n    border: solid 1px ${({ theme }) => theme.color.borders};\r\n    padding: 10px;\r\n    flex-grow: 1;\r\n    margin: 10px;\r\n`;\r\n\r\nexport default Input;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n        state: \"none\"\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: (state) => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: task }) => {\r\n            const index = tasks.findIndex(({ id }) => id === task);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }, { payload: task }) => {\r\n            tasks.forEach((task, index) => {\r\n                tasks[index].done = true;\r\n            })\r\n        },\r\n        fetchExampleTasks: () => { },\r\n        setTasks: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n        },\r\n        setTasksState: (state, { payload: stateName }) => {\r\n            state.state = stateName;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    setTasks,\r\n    setTasksState\r\n} = tasksSlice.actions;\r\n\r\nexport const selectTasks = state => state.tasks.tasks;\r\nexport const selectHideDone = state => state.tasks.hideDone;\r\nexport const selectState = state => state.tasks.state;\r\n\r\nexport const getTasksById = (state, taskId) =>\r\n    selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state);\r\n\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    }\r\n\r\n    return tasks.filter(({ content }) =>\r\n        content.toUpperCase().includes(query.trim().toUpperCase()));\r\n}\r\n\r\n\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const FormComponent = styled.form`\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    padding: 10px;\r\n    display: flex;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    display: flex;\r\n    align-content: center;\r\n    justify-content: center;\r\n    color: ${({ theme }) => theme.color.fontLight};\r\n    background-color: ${({ theme }) => theme.color.primary};\r\n    border: none;\r\n    padding: 5px;\r\n    padding: 10px;\r\n    margin: 10px;\r\n    transition: background 0.5s, transform 1s;\r\n\r\n    &:hover {\r\n        filter: brightness(130%);\r\n        transform: scale(1.05);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(160%);\r\n        box-shadow: inset 1px 1px 2px darkgrey;\r\n    }\r\n`;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Input from \"../../input\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport { FormComponent, Button } from \"./styled\";\r\n\r\nconst Form = ({ inputPlaceholder, formButtonInnerText }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const trimmedContent = newTaskContent.trim();\r\n        if (trimmedContent === \"\") {\r\n            setNewTaskContent(\"\");\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: trimmedContent,\r\n            done: false,\r\n            id: nanoid()\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <FormComponent onSubmit={onFormSubmit}>\r\n            <Input\r\n                ref={inputRef}\r\n                value={newTaskContent}\r\n                placeholder={inputPlaceholder}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n                autoFocus\r\n            />\r\n            <Button>{formButtonInnerText}</Button>\r\n        </FormComponent>\r\n    )\r\n};\r\n\r\nexport default Form;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst languageSlice = createSlice({\r\n    name: 'languages',\r\n    initialState: {\r\n        language: \"EN\"\r\n    },\r\n    reducers: {\r\n        changeLanguage: (state, { payload: chosenLanguage }) => {\r\n            state.language = chosenLanguage;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { changeLanguage } = languageSlice.actions;\r\nexport const selectLanguage = state => state.languages.language;\r\nexport default languageSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.color.fontDark};\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    font-weight: 700;\r\n    border: solid 1px;\r\n    padding: 5px;\r\n    margin: 5px;\r\n    transition: background 0.5s, transform 1s;\r\n\r\n    &:hover {\r\n        filter: brightness(130%);\r\n        transform: scale(1.05);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(160%);\r\n        box-shadow: inset 1px 1px 2px darkgrey;\r\n    }\r\n`;","import { useDispatch } from \"react-redux\";\r\nimport { changeLanguage } from \"../languageSlice\";\r\nimport { Button } from \"./styled\";\r\n\r\nconst Switcher = ({ descriptions }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div>\r\n            {Object.keys(descriptions).map((key) => (\r\n                <Button\r\n                    key={key}\r\n                    value={key}\r\n                    onClick={() => dispatch(changeLanguage(key))}\r\n                >\r\n                    {key}\r\n                </Button>\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Switcher;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledTaskList = styled.ul`\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    padding: 15px;\r\n    list-style-type: none;\r\n    width: 100%;\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n    display: grid;\r\n    grid-gap: 10px;\r\n    grid-template-columns: auto 1fr auto;\r\n    align-items: center;\r\n    padding: 6px;\r\n    border-style: solid;\r\n    border-width: 0px 0px 1px 0px;\r\n    border-color: ${({ theme }) => theme.color.borders};\r\n`;\r\n\r\nexport const TaskContent = styled.span`\r\n    word-break: break-all;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-content: center;\r\n    color: ${({ theme }) => theme.color.fontLight};\r\n    border: none;\r\n    padding: 5px;\r\n    width: 28px;\r\n    height: 28px;\r\n    transition: 0.5s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.color.toggleDone};\r\n\r\n        &:hover {\r\n            filter: brightness(130%);\r\n        }\r\n\r\n        &:active {\r\n            filter: brightness(160%);\r\n            box-shadow: inset 1px 1px 3px ${({ theme }) => theme.color.shadows};\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.remove};\r\n\r\n        &:hover {\r\n            filter: brightness(130%);\r\n        }\r\n\r\n        &:active {\r\n            filter: brightness(160%);\r\n            box-shadow: inset 1px 1px 3px ${({ theme }) => theme.color.shadows};\r\n        }\r\n    `}\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { StyledTaskList, ListItem, TaskContent, Button } from \"./styled\";\r\nimport { selectTasksByQuery, toggleTaskDone, removeTask, selectHideDone } from \"../../tasksSlice\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\n\r\nconst TaskList = () => {\r\n  const location = useLocation();\r\n  const query = new URLSearchParams(location.search).get(\"searchQueryParamName\");\r\n\r\n  const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n  const hideDone = useSelector(selectHideDone);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <StyledTaskList>\r\n      {tasks.map(task => (\r\n        <ListItem\r\n          key={task.id}\r\n          hidden={task.done && hideDone}\r\n        >\r\n          <Button\r\n            toggleDone\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n          >\r\n            {task.done ? \"✔\" : \" \"}\r\n          </Button>\r\n          <TaskContent done={task.done}>\r\n            <Link to={`/zadania/${task.id}`}>{task.content}</Link>\r\n          </TaskContent>\r\n          <Button\r\n            remove\r\n            onClick={() => dispatch(removeTask(task.id))}\r\n          >\r\n            🗑\r\n          </Button>\r\n        </ListItem>\r\n      ))}\r\n    </StyledTaskList>\r\n  )\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const Element = styled.div`\r\n    display: grid;\r\n    gap: 10px;\r\n    grid-template-columns: auto auto;\r\n    \r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.color.primary};\r\n    font-weight: 400;\r\n    background-color: transparent;\r\n    border: none;\r\n    transition: 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.disabled};\r\n        cursor: unset;\r\n    }\r\n`;\r\n\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, setAllDone, selectHideDone } from \"../../tasksSlice\";\r\nimport { Element, Button } from \"../styled\";\r\n\r\nconst Buttons = ({\r\n    setDoneButtonInnerText,\r\n    toggleButtonInnerTextHidden,\r\n    toggleButtonInnerTextVisible\r\n}) => {\r\n    const tasks = useSelector(selectTasks);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <Element>\r\n            {tasks.length > 0 && (\r\n                <>\r\n                    <Button onClick={() => dispatch(toggleHideDone())}>\r\n                        {hideDone ? toggleButtonInnerTextHidden : toggleButtonInnerTextVisible}\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={tasks.every(({ done }) => done)}\r\n                    >\r\n                        {setDoneButtonInnerText}\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Element>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const HeaderContainer = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto auto;\r\n    gap: 10px;\r\n    align-items: center;\r\n    padding-right: 10px;\r\n    margin: 0 0 1px 0;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}) {\r\n        grid-template-columns: 1fr;\r\n        justify-content: center;\r\n    }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const SectionContainer = styled.section`\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    margin-bottom: 10px;\r\n    padding: 15px;\r\n`;\r\n\r\nexport const Header = styled.h2`\r\n    padding: 10px;\r\n    font-weight: 700;\r\n    font-size: 20px;\r\n    margin: 0 0 1px 0;\r\n`;","import { HeaderContainer } from \"../HeaderContainer\";\r\nimport { SectionContainer, Header } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <SectionContainer>\r\n        <HeaderContainer>\r\n            <Header>\r\n                {title}\r\n            </Header>\r\n            {extraHeaderContent}\r\n        </HeaderContainer>\r\n        {body}\r\n    </SectionContainer>\r\n);\r\n\r\nexport default Section;","const descriptions = {\r\n  EN: {\r\n    headerTitle: \"To-do list\",\r\n    sectionTitle: \"Add new task\",\r\n    tasksSectionTitle: \"List of tasks\",\r\n    inputPlaceholder: \"What are you going to do?\",\r\n    formButtonInnerText: \"Add task\",\r\n    setDoneButtonInnerText: \"Finish all\",\r\n    toggleButtonInnerTextHidden: \"Show done\",\r\n    toggleButtonInnerTextVisible: \"Hide done\",\r\n    getExampleTasksButtonText: \"Get example tasks\"\r\n  },\r\n  PL: {\r\n    headerTitle: \"Lista zadań\",\r\n    sectionTitle: \"Dodaj nowe zadanie\",\r\n    tasksSectionTitle: \"Lista zadań\",\r\n    inputPlaceholder: \"Co jest do zrobienia?\",\r\n    formButtonInnerText: \"Dodaj zadanie\",\r\n    setDoneButtonInnerText: \"Ukończ wszystkie\",\r\n    toggleButtonInnerTextHidden: \"Pokaż ukończone\",\r\n    toggleButtonInnerTextVisible: \"Ukryj ukończone\",\r\n    getExampleTasksButtonText: \"Pobierz przykładowe zadania\"\r\n  }\r\n};\r\n\r\nexport default descriptions;","import descriptions from \"../../features/languages/descriptions\";\r\nimport Switcher from \"../../features/languages/Switcher\";\r\nimport { HeaderContainer } from \"../HeaderContainer\";\r\n\r\nconst Header = ({ title }) => (\r\n  <header>\r\n    <HeaderContainer>\r\n      <h1>{title}</h1>\r\n      <Switcher descriptions={descriptions} />\r\n    </HeaderContainer>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n`;","import { useHistory, useLocation } from \"react-router-dom\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport Input from \"../../input\"\r\nimport { Wrapper } from \"./styled\";\r\n\r\nconst Search = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    const searchParams = new URLSearchParams(location.search);\r\n    const query = searchParams.get(\"searchQueryParamName\");\r\n\r\n    const replaceQueryParameter = ({ value }) => {\r\n\r\n        if (value) {\r\n            searchParams.set(\"searchQueryParamName\", value);\r\n        } else {\r\n            searchParams.delete(\"searchQueryParamName\");\r\n        }\r\n\r\n        history.push(`${location.pathname}?${searchParams.toString()}`);\r\n    };\r\n\r\n    const onInputChange = ({ target }) => {\r\n        replaceQueryParameter({\r\n            value: target.value.trim() !== \"\" ? target.value : undefined,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Input\r\n                placeholder=\"Filtruj zadania\"\r\n                value={query || \"\"}\r\n                onChange={onInputChange}\r\n            />\r\n        </Wrapper>\r\n    )\r\n};\r\n\r\nexport default Search;","import Form from \"./Form\";\nimport Switcher from \"../../languages/Switcher\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../../common/Section\";\nimport Header from '../../../common/Header';\nimport descriptions from \"../../languages/descriptions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectLanguage } from \"../../languages/languageSlice\";\nimport { Button } from \"./styled\";\nimport { fetchExampleTasks, selectState } from \"../tasksSlice\";\nimport Search from \"./Search\";\n\nfunction TasksPage() {\n  const language = useSelector(selectLanguage);\n  const state = useSelector(selectState);\n\n  const dispatch = useDispatch();\n\n  document.title = descriptions[language].headerTitle;\n\n  return (\n    <main>\n      <Header title={descriptions[language].headerTitle} />\n      <Section\n        title={descriptions[language].sectionTitle}\n        body={\n          <Form\n            inputPlaceholder={descriptions[language].inputPlaceholder}\n            formButtonInnerText={descriptions[language].formButtonInnerText}\n          />\n        }\n        extraHeaderContent={\n          <>\n            <div>\n              <Button onClick={() => dispatch(fetchExampleTasks())}>\n                {(state === \"loading\") ? \"loading\" : descriptions[language].getExampleTasksButtonText}\n                {/* {descriptions[language].getExampleTasksButtonText} */}\n              </Button>\n            </div>\n          </>\n        }\n      />\n      <Section\n        title=\"Wyszukiwarka\"\n        body={<Search />}\n        extraHeaderContent={<></>}\n      />\n      <Section\n        title={descriptions[language].tasksSectionTitle}\n        body={\n          <TaskList />\n        }\n        extraHeaderContent={\n          <Buttons\n            setDoneButtonInnerText={descriptions[language].setDoneButtonInnerText}\n            toggleButtonInnerTextVisible={descriptions[language].toggleButtonInnerTextVisible}\n            toggleButtonInnerTextHidden={descriptions[language].toggleButtonInnerTextHidden}\n          />\n        }\n      />\n    </main>\n  );\n}\n\nexport default TasksPage;","import Section from \"../../../common/Section\";\r\nimport Header from '../../../common/Header';\r\nimport descriptions from \"../../languages/descriptions\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTasksById } from \"../tasksSlice\";\r\n\r\nfunction TaskPage() {\r\n  const { id } = useParams();\r\n  const task = useSelector(state => getTasksById(state, id));\r\n\r\n  return (\r\n    <main>\r\n      <Header title=\"Szczegóły zadania\" />\r\n      <Section\r\n        title={task ? task.content : \"Nie znaleziono :O\"}\r\n        body={<><strong>Ukończone: </strong> {task.done ? \"Tak\" : \"Nie\"} </>}\r\n        extraHeaderContent={<>gotowe</>}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default TaskPage;","import Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\n\r\nconst AuthorPage = () => (\r\n    <main>\r\n        <Header title=\"O autorze\" />\r\n        <Section\r\n            title=\"Michał Cesarczyk\"\r\n            body={<>O mnie</>}\r\n            extraHeaderContent={<></>}\r\n        />\r\n    </main>\r\n);\r\n\r\nexport default AuthorPage;","import { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nconst activeClassName = \"active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(props => ({\r\n    activeClassName,\r\n}))`\r\n    color: ${({ theme }) => theme.color.fontLight};\r\n\r\n    &:${activeClassName} {\r\n        color: red;\r\n    }\r\n`;\r\n\r\nexport const StyledNavBeam = styled.ul`\r\n    display: flex;\r\n    justify-content: center;\r\n    gap: 20px;\r\n    padding: 15px;\r\n    background-color: ${({ theme }) => theme.color.primary};\r\n    margin-bottom: 20px;\r\n`;","import { Switch, Route, HashRouter, Redirect } from \"react-router-dom\";\r\nimport TasksPage from \"./features/tasks/TasksPage\";\r\nimport TaskPage from \"./features/tasks/TaskPage\";\r\nimport AuthorPage from \"./features/author/AuthorPage\";\r\nimport { StyledNavBeam, StyledNavLink } from \"./styled\";\r\n\r\nconst App = () => (\r\n    <HashRouter>\r\n        <nav>\r\n            <StyledNavBeam>\r\n                <li>\r\n                    <StyledNavLink to=\"/zadania\">Zadania</StyledNavLink>\r\n                </li>\r\n                <li>\r\n                    <StyledNavLink to=\"/autor\">O autorze</StyledNavLink>\r\n                </li>\r\n            </StyledNavBeam>\r\n            <Switch>\r\n                <Route path=\"/zadania/:id\">\r\n                    <TaskPage />\r\n                </Route>\r\n                <Route path=\"/zadania\">\r\n                    <TasksPage />\r\n                </Route>\r\n                <Route path=\"/autor\">\r\n                    <AuthorPage />\r\n                </Route>\r\n                <Route path=\"/\">\r\n                    <Redirect to=\"/zadania\" />\r\n                </Route>\r\n            </Switch>\r\n        </nav>\r\n    </HashRouter>\r\n);\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\nhtml {\r\n  box-sizing: border-box;\r\n}\r\n\r\n*, ::after, ::before {\r\n  box-sizing: inherit;\r\n}\r\n\r\nbody {\r\n  background-color: #eee;\r\n  max-width: 1024px;\r\n  min-width: 320px;\r\n  margin: 0 auto;\r\n  padding: 10px;\r\n  font-family: 'Montserrat', sans-serif;\r\n  font-size: 14 px;\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n};\r\n\r\nli {\r\n  list-style: none;\r\n};\r\n\r\na {\r\n  text-decoration: none;\r\n}`;","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todo-list-react/exampleTasks.json\");\r\n\r\n    if(!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { call, put, delay, takeLatest, takeEvery, select } from \"redux-saga/effects\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\nimport { fetchExampleTasks, setTasks, selectTasks, setTasksState } from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\n\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield put(setTasksState(\"loading\"));\r\n        yield delay(2000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasks));\r\n        yield put(setTasksState(\"done\"));\r\n    } catch (error) {\r\n        yield call(alert, \"Something bad happened!\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport languageReducer from './features/languages/languageSlice';\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n        languages: languageReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(tasksSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Normalize } from \"styled-normalize\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from 'react-redux';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <Normalize />\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    color: {\r\n        primary: \"teal\",\r\n        fontDark: \"#000\",\r\n        background: \"#fff\",\r\n        fontLight: \"#fff\",\r\n        disabled: \"#ccc\",\r\n        borders: \"#ddd\",\r\n        shadows: \"darkgrey\",\r\n        toggleDone: \"forestgreen\",\r\n        remove: \"crimson\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: \"480px\",\r\n        tabletMax: \"768px\",\r\n    },\r\n}"],"sourceRoot":""}