{"version":3,"sources":["styled.js","features/languages/languageSlice.js","features/tasks/input/index.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPage/Form/styled.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/styled.js","features/tasks/TasksPage/Buttons/index.js","common/HeaderContainer/index.js","common/Section/styled.js","common/Section/index.js","features/languages/descriptions.js","features/languages/Switcher/styled.js","features/languages/Switcher/index.js","common/Header/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","features/author/AuthorPage.js","App.js","reportWebVitals.js","GlobalStyle.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","store.js","index.js","theme.js"],"names":["activeClassName","StyledNavLink","styled","NavLink","attrs","theme","color","fontLight","StyledNavBeam","ul","primary","languageSlice","createSlice","name","initialState","language","reducers","changeLanguage","state","chosenLanguage","payload","actions","selectLanguage","languages","Input","input","borders","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","parse","getItem","hideDone","addTask","task","push","toggleHideDone","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","forEach","fetchExampleTasks","setTasks","setTasksState","stateName","selectTasks","selectHideDone","selectState","FormComponent","form","background","breakpoint","tabletMax","Button","button","Form","inputPlaceholder","formButtonInnerText","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedContent","trim","content","nanoid","current","focus","ref","value","placeholder","onChange","target","autoFocus","StyledTaskList","ListItem","li","StyledLink","Link","props","TaskContent","span","css","toggleDone","shadows","remove","searchQueryParamName","TaskList","location","useLocation","query","URLSearchParams","search","get","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","hidden","onClick","to","Element","div","mobileMax","disabled","Buttons","setDoneButtonInnerText","toggleButtonInnerTextHidden","toggleButtonInnerTextVisible","length","every","HeaderContainer","SectionContainer","section","Header","h2","Section","title","body","extraHeaderContent","descriptions","EN","headerTitle","sectionTitle","tasksSectionTitle","getExampleTasksButtonText","tasksPageTitle","taskPageTitle","taskStatusLabel","taskStatusDone","taskStatusUndone","taskStatusNotFound","searchSectionTitle","searchLabelPlaceholder","getExampleTasksButtonLoader","authorPageTitle","authorPageContent","PL","fontDark","Switcher","Object","keys","key","Wrapper","Search","useQueryParameter","replaceQueryParameter","history","useHistory","searchParams","set","delete","pathname","toString","useReplaceQueryParameter","undefined","TasksPage","document","TaskPage","useParams","find","getTasksById","AuthorPage","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","put","delay","call","exampleTasks","alert","select","takeLatest","type","takeEvery","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","languageReducer","middleware","run","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f2c28a16.chunk.js","sourcesContent":["import { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nconst activeClassName = \"active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\n    color: ${({ theme }) => theme.color.fontLight};\r\n    font-weight: 300;\r\n\r\n     &.${activeClassName} {\r\n        font-weight: 700;\r\n    }\r\n`;\r\n\r\nexport const StyledNavBeam = styled.ul`\r\n    display: flex;\r\n    justify-content: center;\r\n    gap: 20px;\r\n    padding: 15px;\r\n    background-color: ${({ theme }) => theme.color.primary};\r\n    margin-bottom: 20px;\r\n`;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst languageSlice = createSlice({\r\n    name: 'languages',\r\n    initialState: {\r\n        language: \"EN\"\r\n    },\r\n    reducers: {\r\n        changeLanguage: (state, { payload: chosenLanguage }) => {\r\n            state.language = chosenLanguage;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { changeLanguage } = languageSlice.actions;\r\nexport const selectLanguage = state => state.languages.language;\r\nexport default languageSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const Input = styled.input`\r\n    border: solid 1px ${({ theme }) => theme.color.borders};\r\n    padding: 10px;\r\n    flex-grow: 1;\r\n    margin: 10px;\r\n`;\r\n\r\nexport default Input;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n        state: \"none\"\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: (state) => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: task }) => {\r\n            const index = tasks.findIndex(({ id }) => id === task);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }, { payload: task }) => {\r\n            tasks.forEach((task, index) => {\r\n                tasks[index].done = true;\r\n            })\r\n        },\r\n        fetchExampleTasks: () => { },\r\n        setTasks: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n        },\r\n        setTasksState: (state, { payload: stateName }) => {\r\n            state.state = stateName;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    setTasks,\r\n    setTasksState\r\n} = tasksSlice.actions;\r\n\r\nexport const selectTasks = state => state.tasks.tasks;\r\nexport const selectHideDone = state => state.tasks.hideDone;\r\nexport const selectState = state => state.tasks.state;\r\n\r\nexport const getTasksById = (state, taskId) =>\r\n    selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state);\r\n\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    }\r\n\r\n    return tasks.filter(({ content }) =>\r\n        content.toUpperCase().includes(query.trim().toUpperCase()));\r\n}\r\n\r\n\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const FormComponent = styled.form`\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    padding: 10px;\r\n    display: flex;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    display: flex;\r\n    align-content: center;\r\n    justify-content: center;\r\n    color: ${({ theme }) => theme.color.fontLight};\r\n    background-color: ${({ theme }) => theme.color.primary};\r\n    border: none;\r\n    padding: 5px;\r\n    padding: 10px;\r\n    margin: 10px;\r\n    transition: background 0.5s, transform 1s;\r\n\r\n    &:hover {\r\n        filter: brightness(130%);\r\n        transform: scale(1.05);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(160%);\r\n        box-shadow: inset 1px 1px 2px darkgrey;\r\n    }\r\n`;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Input from \"../../input\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport { FormComponent, Button } from \"./styled\";\r\n\r\nconst Form = ({ inputPlaceholder, formButtonInnerText }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const trimmedContent = newTaskContent.trim();\r\n        if (trimmedContent === \"\") {\r\n            setNewTaskContent(\"\");\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: trimmedContent,\r\n            done: false,\r\n            id: nanoid()\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <FormComponent onSubmit={onFormSubmit}>\r\n            <Input\r\n                ref={inputRef}\r\n                value={newTaskContent}\r\n                placeholder={inputPlaceholder}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n                autoFocus\r\n            />\r\n            <Button>{formButtonInnerText}</Button>\r\n        </FormComponent>\r\n    )\r\n};\r\n\r\nexport default Form;","import { Link } from \"react-router-dom\";\r\nimport styled, { css } from \"styled-components\";\r\nconst activeClassName = \"active\";\r\n\r\nexport const StyledTaskList = styled.ul`\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    padding: 15px;\r\n    list-style-type: none;\r\n    width: 100%;\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n    display: grid;\r\n    grid-gap: 10px;\r\n    grid-template-columns: auto 1fr auto;\r\n    align-items: center;\r\n    padding: 6px;\r\n    border-style: solid;\r\n    border-width: 0px 0px 1px 0px;\r\n    border-color: ${({ theme }) => theme.color.borders};\r\n`;\r\n\r\nexport const StyledLink = styled(Link).attrs(props => ({\r\n    activeClassName\r\n}))`\r\n    color: ${({ theme }) => theme.color.primary};\r\n    \r\n      &:${activeClassName} {\r\n        filter: brightness(150%);\r\n    }\r\n`;\r\n\r\nexport const TaskContent = styled.span`\r\n    word-break: break-all;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-content: center;\r\n    color: ${({ theme }) => theme.color.fontLight};\r\n    border: none;\r\n    padding: 5px;\r\n    width: 28px;\r\n    height: 28px;\r\n    transition: 0.5s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.color.toggleDone};\r\n\r\n        &:hover {\r\n            filter: brightness(130%);\r\n        }\r\n\r\n        &:active {\r\n            filter: brightness(160%);\r\n            box-shadow: inset 1px 1px 3px ${({ theme }) => theme.color.shadows};\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.remove};\r\n\r\n        &:hover {\r\n            filter: brightness(130%);\r\n        }\r\n\r\n        &:active {\r\n            filter: brightness(160%);\r\n            box-shadow: inset 1px 1px 3px ${({ theme }) => theme.color.shadows};\r\n        }\r\n    `}\r\n`;","const searchQueryParamName = \"search\";\r\n\r\nexport default searchQueryParamName;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { StyledTaskList, ListItem, TaskContent, Button, StyledLink } from \"./styled\";\r\nimport { selectTasksByQuery, toggleTaskDone, removeTask, selectHideDone } from \"../../tasksSlice\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\n\r\nconst TaskList = () => {\r\n  const location = useLocation();\r\n  const query = new URLSearchParams(location.search).get(searchQueryParamName);\r\n\r\n  const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n  const hideDone = useSelector(selectHideDone);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <StyledTaskList>\r\n      {tasks.map(task => (\r\n        <ListItem\r\n          key={task.id}\r\n          hidden={task.done && hideDone}\r\n        >\r\n          <Button\r\n            toggleDone\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n          >\r\n            {task.done ? \"✔\" : \" \"}\r\n          </Button>\r\n          <TaskContent done={task.done}>\r\n            <StyledLink to={`/tasks/${task.id}`}>{task.content}</StyledLink>\r\n          </TaskContent>\r\n          <Button\r\n            remove\r\n            onClick={() => dispatch(removeTask(task.id))}\r\n          >\r\n            🗑\r\n          </Button>\r\n        </ListItem>\r\n      ))}\r\n    </StyledTaskList>\r\n  )\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const Element = styled.div`\r\n    display: grid;\r\n    gap: 10px;\r\n    grid-template-columns: auto auto;\r\n    \r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.color.primary};\r\n    font-weight: 400;\r\n    background-color: transparent;\r\n    border: none;\r\n    transition: 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.disabled};\r\n        cursor: unset;\r\n    }\r\n`;\r\n\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, setAllDone, selectHideDone } from \"../../tasksSlice\";\r\nimport { Element, Button } from \"../styled\";\r\n\r\nconst Buttons = ({\r\n    setDoneButtonInnerText,\r\n    toggleButtonInnerTextHidden,\r\n    toggleButtonInnerTextVisible\r\n}) => {\r\n    const tasks = useSelector(selectTasks);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <Element>\r\n            {tasks.length > 0 && (\r\n                <>\r\n                    <Button onClick={() => dispatch(toggleHideDone())}>\r\n                        {hideDone ? toggleButtonInnerTextHidden : toggleButtonInnerTextVisible}\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={tasks.every(({ done }) => done)}\r\n                    >\r\n                        {setDoneButtonInnerText}\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Element>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const HeaderContainer = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto auto;\r\n    gap: 10px;\r\n    align-items: center;\r\n    padding-right: 10px;\r\n    margin: 0 0 1px 0;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}) {\r\n        grid-template-columns: 1fr;\r\n        justify-content: center;\r\n    }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const SectionContainer = styled.section`\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    margin-bottom: 10px;\r\n    padding: 15px;\r\n`;\r\n\r\nexport const Header = styled.h2`\r\n    padding: 10px;\r\n    font-weight: 700;\r\n    font-size: 20px;\r\n    margin: 0 0 1px 0;\r\n`;","import { HeaderContainer } from \"../HeaderContainer\";\r\nimport { SectionContainer, Header } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <SectionContainer>\r\n        <HeaderContainer>\r\n            <Header>\r\n                {title}\r\n            </Header>\r\n            {extraHeaderContent}\r\n        </HeaderContainer>\r\n        {body}\r\n    </SectionContainer>\r\n);\r\n\r\nexport default Section;","const descriptions = {\r\n  EN: {\r\n    headerTitle: \"To-do list\",\r\n    sectionTitle: \"Add new task\",\r\n    tasksSectionTitle: \"List of tasks\",\r\n    inputPlaceholder: \"What are you going to do?\",\r\n    formButtonInnerText: \"Add task\",\r\n    setDoneButtonInnerText: \"Finish all\",\r\n    toggleButtonInnerTextHidden: \"Show done\",\r\n    toggleButtonInnerTextVisible: \"Hide done\",\r\n    getExampleTasksButtonText: \"Get example tasks\",\r\n    tasksPageTitle: \"Tasks\",\r\n    taskPageTitle: \"Task details\",\r\n    taskStatusLabel: \"Accomplished: \",\r\n    taskStatusDone: \"Yes\",\r\n    taskStatusUndone: \"No\",\r\n    taskStatusNotFound: \"Task not found\",\r\n    searchSectionTitle: \"Search\",\r\n    searchLabelPlaceholder: \"Filter tasks\",\r\n    getExampleTasksButtonLoader: \"Loading...\",\r\n    authorPageTitle: \"About author\",\r\n    authorPageContent: \"My name is Mike. I deal with machining on a daily basis, working in the railway industry as a CNC technologist-programmer. I like this programming part of my job the most. IT technologies, the world of FOSS, Linux and the basics of programming have always been close to me, and for some time I plan to make frontend development my main occupation. Outside of working hours, I lift weights at the gym, ride my bike, and recently I also swim on a paddleboard, which my wife infected me with :)\",\r\n  },\r\n  PL: {\r\n    headerTitle: \"Lista zadań\",\r\n    sectionTitle: \"Dodaj nowe zadanie\",\r\n    tasksSectionTitle: \"Lista zadań\",\r\n    inputPlaceholder: \"Co jest do zrobienia?\",\r\n    formButtonInnerText: \"Dodaj zadanie\",\r\n    setDoneButtonInnerText: \"Ukończ wszystkie\",\r\n    toggleButtonInnerTextHidden: \"Pokaż ukończone\",\r\n    toggleButtonInnerTextVisible: \"Ukryj ukończone\",\r\n    getExampleTasksButtonText: \"Pobierz przykładowe zadania\",\r\n    tasksPageTitle: \"Zadania\",\r\n    taskPageTitle: \"Szczegóły zadania\",\r\n    taskStatusLabel: \"Ukończone: \",\r\n    taskStatusDone: \"Tak\",\r\n    taskStatusUndone: \"Nie\",\r\n    taskStatusNotFound: \"Nie znaleziono zadania\",\r\n    searchSectionTitle: \"Wyszukiwarka\",\r\n    searchLabelPlaceholder: \"Filtruj zadania\",\r\n    getExampleTasksButtonLoader: \"Ładowanie...\",\r\n    authorPageTitle: \"O autorze\",\r\n    authorPageContent: \"Mam na imię Michał.Na co dzień zajmuję się obróbką skrawaniem, pracując w branży kolejowej jako technolog- programista CNC.Tę programistyczną część mojej pracy lubię najbardziej.Zawsze bliskie mi były technologie IT, świat FOSS, Linuksa i podstawy programowania, a od jakiegoś czasu planuję uczynić frontend development moim głównym zajęciem.Poza godzinami pracy ćwiczę na siłowni, jeżdżę na rowerze, a od niedawna także pływam na paddleboardzie, czym zaraziła mnie moja małżonka:)\",\r\n  }\r\n};\r\n\r\nexport default descriptions;","import styled from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.color.fontDark};\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    font-weight: 700;\r\n    border: solid 1px;\r\n    padding: 5px;\r\n    margin: 5px;\r\n    transition: background 0.5s, transform 1s;\r\n\r\n    &:hover {\r\n        filter: brightness(130%);\r\n        transform: scale(1.05);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(160%);\r\n        box-shadow: inset 1px 1px 2px darkgrey;\r\n    }\r\n`;","import { useDispatch } from \"react-redux\";\r\nimport { changeLanguage } from \"../languageSlice\";\r\nimport { Button } from \"./styled\";\r\n\r\nconst Switcher = ({ descriptions }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div>\r\n            {Object.keys(descriptions).map((key) => (\r\n                <Button\r\n                    key={key}\r\n                    value={key}\r\n                    onClick={() => dispatch(changeLanguage(key))}\r\n                >\r\n                    {key}\r\n                </Button>\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Switcher;","import descriptions from \"../../features/languages/descriptions\";\r\nimport Switcher from \"../../features/languages/Switcher\";\r\nimport { HeaderContainer } from \"../HeaderContainer\";\r\n\r\nconst Header = ({ title }) => (\r\n  <header>\r\n    <HeaderContainer>\r\n      <h1>{title}</h1>\r\n      <Switcher descriptions={descriptions} />\r\n    </HeaderContainer>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n`;","import { useSelector } from \"react-redux\";\r\nimport { selectLanguage } from \"../../../languages/languageSlice\";\r\nimport { useQueryParameter, useReplaceQueryParameter } from \"../queryParameters\";\r\nimport { Wrapper } from \"./styled\";\r\nimport Input from \"../../input\"\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport descriptions from \"../../../languages/descriptions\";\r\n\r\nconst Search = () => {\r\n    const language = useSelector(selectLanguage);\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n    const onInputChange = ({ target }) => {\r\n        replaceQueryParameter({\r\n            key: searchQueryParamName,\r\n            value: target.value.trim() !== \"\" ? target.value : undefined,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Input\r\n                placeholder={descriptions[language].searchLabelPlaceholder}\r\n                value={query || \"\"}\r\n                onChange={onInputChange}\r\n            />\r\n        </Wrapper>\r\n    )\r\n};\r\n\r\nexport default Search;","import { useHistory, useLocation } from \"react-router-dom\"\r\n\r\nexport const useQueryParameter = key => {\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(location.search);\r\n    return searchParams.get(key);\r\n}\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    return ({ key, value }) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if (value) {\r\n            searchParams.set(key, value);\r\n        } else {\r\n            searchParams.delete(key);\r\n        }\r\n\r\n        history.push(`${location.pathname}?${searchParams.toString()}`);\r\n    }\r\n}","import Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../../common/Section\";\nimport Header from '../../../common/Header';\nimport descriptions from \"../../languages/descriptions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectLanguage } from \"../../languages/languageSlice\";\nimport { Button } from \"./styled\";\nimport { fetchExampleTasks, selectState } from \"../tasksSlice\";\nimport Search from \"./Search\";\n\nfunction TasksPage() {\n  const language = useSelector(selectLanguage);\n  const state = useSelector(selectState);\n\n  const dispatch = useDispatch();\n\n  document.title = descriptions[language].headerTitle;\n\n  return (\n    <main>\n      <Header title={descriptions[language].headerTitle} />\n      <Section\n        title={descriptions[language].sectionTitle}\n        body={\n          <Form\n            inputPlaceholder={descriptions[language].inputPlaceholder}\n            formButtonInnerText={descriptions[language].formButtonInnerText}\n          />\n        }\n        extraHeaderContent={\n          <>\n            <div>\n              <Button\n                disabled={state === \"loading\"}\n                onClick={() => dispatch(fetchExampleTasks())}\n              >\n                {(state === \"loading\") ?\n                  descriptions[language].getExampleTasksButtonLoader\n                  : descriptions[language].getExampleTasksButtonText\n                }\n              </Button>\n            </div>\n          </>\n        }\n      />\n      <Section\n        title={descriptions[language].searchSectionTitle}\n        body={<Search />}\n        extraHeaderContent={<></>}\n      />\n      <Section\n        title={descriptions[language].tasksSectionTitle}\n        body={\n          <TaskList />\n        }\n        extraHeaderContent={\n          <Buttons\n            setDoneButtonInnerText={descriptions[language].setDoneButtonInnerText}\n            toggleButtonInnerTextVisible={descriptions[language].toggleButtonInnerTextVisible}\n            toggleButtonInnerTextHidden={descriptions[language].toggleButtonInnerTextHidden}\n          />\n        }\n      />\n    </main>\n  );\n}\n\nexport default TasksPage;","import Section from \"../../../common/Section\";\r\nimport Header from '../../../common/Header';\r\nimport descriptions from \"../../languages/descriptions\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTasksById } from \"../tasksSlice\";\r\nimport { selectLanguage } from \"../../languages/languageSlice\";\r\n\r\nfunction TaskPage() {\r\n  const { id } = useParams();\r\n  const task = useSelector(state => getTasksById(state, id));\r\n  const language = useSelector(selectLanguage);\r\n\r\n  return (\r\n    <main>\r\n      <Header title={descriptions[language].taskPageTitle} />\r\n      <Section\r\n        title={!task ? descriptions[language].taskStatusNotFound : task.content}\r\n        body={<>\r\n          <strong>\r\n            {task && descriptions[language].taskStatusLabel}\r\n          </strong>\r\n          {task ?\r\n            (task.done ?\r\n              descriptions[language].taskStatusDone\r\n              : descriptions[language].taskStatusUndone)\r\n            : \"\"}\r\n        </>}\r\n        extraHeaderContent={<></>}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default TaskPage;","import { useSelector } from \"react-redux\";\r\nimport { selectLanguage } from \"../languages/languageSlice\";\r\nimport descriptions from \"../languages/descriptions\";\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\n\r\nconst AuthorPage = () => {\r\n    const language = useSelector(selectLanguage);\r\n\r\n    return (\r\n        <main>\r\n            <Header title={descriptions[language].authorPageTitle} />\r\n            <Section\r\n                title=\"Michał Cesarczyk\"\r\n                body={descriptions[language].authorPageContent}\r\n                extraHeaderContent={<></>}\r\n            />\r\n        </main>\r\n    )\r\n};\r\n\r\nexport default AuthorPage;","import { Switch, Route, HashRouter, Redirect } from \"react-router-dom\";\r\nimport { StyledNavBeam, StyledNavLink } from \"./styled\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectLanguage } from \"./features/languages/languageSlice\";\r\nimport TasksPage from \"./features/tasks/TasksPage\";\r\nimport TaskPage from \"./features/tasks/TaskPage\";\r\nimport AuthorPage from \"./features/author/AuthorPage\";\r\nimport descriptions from \"./features/languages/descriptions\";\r\n\r\nconst App = () => {\r\n    const language = useSelector(selectLanguage);\r\n\r\n    return (\r\n        <HashRouter>\r\n            <nav>\r\n                <StyledNavBeam>\r\n                    <li>\r\n                        <StyledNavLink to=\"/tasks\">\r\n                            {descriptions[language].tasksPageTitle}\r\n                        </StyledNavLink>\r\n                    </li>\r\n                    <li>\r\n                        <StyledNavLink to=\"/author\">\r\n                            {descriptions[language].authorPageTitle}\r\n                        </StyledNavLink>\r\n                    </li>\r\n                </StyledNavBeam>\r\n                <Switch>\r\n                    <Route path=\"/tasks/:id\">\r\n                        <TaskPage />\r\n                    </Route>\r\n                    <Route path=\"/tasks\">\r\n                        <TasksPage />\r\n                    </Route>\r\n                    <Route path=\"/author\">\r\n                        <AuthorPage />\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <Redirect to=\"/tasks\" />\r\n                    </Route>\r\n                </Switch>\r\n            </nav>\r\n        </HashRouter>\r\n    )\r\n};\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\nhtml {\r\n  box-sizing: border-box;\r\n}\r\n\r\n*, ::after, ::before {\r\n  box-sizing: inherit;\r\n}\r\n\r\nbody {\r\n  background-color: #eee;\r\n  max-width: 1024px;\r\n  min-width: 320px;\r\n  margin: 0 auto;\r\n  padding: 10px;\r\n  font-family: 'Montserrat', sans-serif;\r\n  font-size: 14 px;\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n};\r\n\r\nli {\r\n  list-style: none;\r\n};\r\n\r\na {\r\n  text-decoration: none;\r\n}`;","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todo-list-react/exampleTasks.json\");\r\n\r\n    if(!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { call, put, delay, takeLatest, takeEvery, select } from \"redux-saga/effects\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\nimport { fetchExampleTasks, setTasks, selectTasks, setTasksState } from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\n\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield put(setTasksState(\"loading\"));\r\n        yield delay(2000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasks));\r\n        yield put(setTasksState(\"done\"));\r\n    } catch (error) {\r\n        yield call(alert, \"Sorry...unable to fetch data!\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport languageReducer from './features/languages/languageSlice';\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n        languages: languageReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(tasksSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Normalize } from \"styled-normalize\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from 'react-redux';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <Normalize />\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    color: {\r\n        primary: \"teal\",\r\n        fontDark: \"#000\",\r\n        background: \"#fff\",\r\n        fontLight: \"#fff\",\r\n        disabled: \"#ccc\",\r\n        borders: \"#ddd\",\r\n        shadows: \"darkgrey\",\r\n        toggleDone: \"forestgreen\",\r\n        remove: \"crimson\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: \"480px\",\r\n        tabletMax: \"768px\",\r\n    },\r\n}"],"sourceRoot":""}