{"version":3,"sources":["Form/index.js","Switcher/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTask","inputPlaceholder","formButtonInnerText","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trimmedContent","trim","value","placeholder","onChange","target","autoFocus","Switcher","languages","changeLanguage","map","language","onClick","key","Tasks","tasks","hideDone","removeTask","toggleTaskDone","task","done","id","content","Buttons","toggleHideDone","setAllDone","setDoneButtonInnerText","toggleButtonInnerTextHidden","toggleButtonInnerTextVisible","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","App","langId","setLangId","headerTitle","sectionTitle","tasksSectionTitle","setHideDone","JSON","parse","localStorage","getItem","setTasks","useEffect","setItem","stringify","findIndex","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae226840.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask, inputPlaceholder, formButtonInnerText }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const trimmedContent = newTaskContent.trim();\r\n        if (trimmedContent === \"\") {\r\n            setNewTaskContent(\"\");\r\n            return;\r\n        }\r\n        addNewTask(trimmedContent);\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={onFormSubmit}>\r\n            <input\r\n                value={newTaskContent}\r\n                className=\"form__input\"\r\n                placeholder={inputPlaceholder}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n                autoFocus\r\n            />\r\n            <button className=\"form__button\">{formButtonInnerText}</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default Form;","const Switcher = ({ languages, changeLanguage }) => (\r\n<div>\r\n    {languages.map(language => (\r\n        <button key={language.key} onClick={() => changeLanguage(language.key)} >{language.key}</button>\r\n    ))}\r\n</div>\r\n);\r\n\r\nexport default Switcher;","import \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n  <ul className=\"tasks\">\r\n    {tasks.map(task => (\r\n      <li\r\n        className={`tasks__item${task.done && hideDone ? \" tasks__item--hidden\" : \"\"}`}\r\n        key={task.id}>\r\n        <button\r\n          className=\"tasks__button tasks__button--done\"\r\n          onClick={() => toggleTaskDone(task.id)}\r\n        >\r\n          {task.done ? \"‚úî\" : \" \"}\r\n        </button>\r\n        <span className={`tasks__content${task.done ? \" tasks__content--done\" : \"\"}`}>\r\n          {task.content}\r\n        </span>\r\n        <button\r\n          className=\"tasks__button tasks__button--remove\"\r\n          onClick={() => removeTask(task.id)}\r\n        >\r\n          üóë\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default Tasks;","import \"./style.css\";\r\n\r\nconst Buttons = ({\r\n    tasks,\r\n    hideDone,\r\n    toggleHideDone,\r\n    setAllDone,\r\n    setDoneButtonInnerText,\r\n    toggleButtonInnerTextHidden,\r\n    toggleButtonInnerTextVisible\r\n}) => (\r\n    <div className=\"buttons__element\">\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <button onClick={toggleHideDone} className=\"buttons__button\">\r\n                    {hideDone ? toggleButtonInnerTextHidden : toggleButtonInnerTextVisible}\r\n                </button>\r\n                <button\r\n                    onClick={setAllDone}\r\n                    className=\"buttons__button\"\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                >\r\n                    {setDoneButtonInnerText}\r\n                </button>\r\n            </>\r\n        )}\r\n    </div>\r\n\r\n);\r\n\r\nexport default Buttons;","import \"./style.css\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <section className=\"section\">\r\n        <div className=\"section__headerContainer\">\r\n            <h2 className=\"section__header\">\r\n                {title}\r\n            </h2>\r\n            {extraHeaderContent}\r\n        </div>\r\n        {body}\r\n    </section>\r\n);\r\n\r\nexport default Section;","const Header = ({ title }) => (\r\n  <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import \"./style.css\";\r\n\r\nconst Container = ({ children }) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import { useEffect, useState } from 'react';\nimport Form from \"./Form\";\nimport Switcher from \"./Switcher\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from './Header';\nimport Container from \"./Container\";\n\nfunction App() {\n  const [langId, setLangId] = useState(0);\n\n  const changeLanguage = (key) => {\n    setLangId(languages.findIndex(language => language.key === key));\n  };\n\n  const languages = [\n    {\n      key: \"EN\",\n      headerTitle: \"To-do list\",\n      sectionTitle: \"Add new task\",\n      tasksSectionTitle: \"List of tasks\",\n      inputPlaceholder: \"What are you going to do?\",\n      formButtonInnerText: \"Add task\",\n      setDoneButtonInnerText: \"Finish all\",\n      toggleButtonInnerTextHidden: \"Show done\",\n      toggleButtonInnerTextVisible: \"Hide done\"\n    },\n    {\n      key: \"PL\",\n      headerTitle: \"Lista zada≈Ñ\",\n      sectionTitle: \"Dodaj nowe zadanie\",\n      tasksSectionTitle: \"Lista zada≈Ñ\",\n      inputPlaceholder: \"Co jest do zrobienia?\",\n      formButtonInnerText: \"Dodaj zadanie\",\n      setDoneButtonInnerText: \"Uko≈Ñcz wszystkie\",\n      toggleButtonInnerTextHidden: \"Poka≈º uko≈Ñczone\",\n      toggleButtonInnerTextVisible: \"Ukryj uko≈Ñczone\"\n    }\n  ];\n\n  const [hideDone, setHideDone] = useState(false);\n\n  const [tasks, setTasks] = useState(\n    JSON.parse(localStorage.getItem(\"tasks\")\n    ) ||\n    [\n      { id: 1, content: \"task1\", done: false },\n      { id: 2, content: \"task2\", done: true },\n    ]\n  );\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  });\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n\n      return task;\n    }))\n  };\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task,\n      done: true,\n    })));\n  };\n\n  const addNewTask = (content) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        content,\n        done: false,\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n      },\n    ])\n  };\n\n  return (\n    <Container>\n      <Header title={languages[langId].headerTitle} />\n      <Section\n        title={languages[langId].sectionTitle}\n        body={\n          <Form\n            addNewTask={addNewTask}\n            inputPlaceholder={languages[langId].inputPlaceholder}\n            formButtonInnerText={languages[langId].formButtonInnerText}\n          />\n        }\n        extraHeaderContent={\n          <Switcher\n            languages={languages}\n            changeLanguage={changeLanguage}\n          />\n        }\n      />\n      <Section\n        title={languages[langId].tasksSectionTitle}\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />\n        }\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n            setDoneButtonInnerText={languages[langId].setDoneButtonInnerText}\n            toggleButtonInnerTextVisible={languages[langId].toggleButtonInnerTextVisible}\n            toggleButtonInnerTextHidden={languages[langId].toggleButtonInnerTextHidden}\n          />\n        }\n      />\n    </Container>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}