{"version":3,"sources":["features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/languages/languageSlice.js","features/languages/Switcher/styled.js","features/languages/Switcher/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","features/languages/descriptions.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","GlobalStyle.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","store.js","index.js","theme.js"],"names":["localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","forEach","fetchExampleTasks","setTasks","actions","selectTasks","selectHideDone","FormComponent","styled","form","theme","color","background","breakpoint","tabletMax","FormInput","input","borders","Button","button","fontLight","primary","Form","inputPlaceholder","formButtonInnerText","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedContent","trim","content","nanoid","current","focus","ref","value","placeholder","onChange","target","autoFocus","languageSlice","language","changeLanguage","chosenLanguage","selectLanguage","languages","fontDark","Switcher","descriptions","Object","keys","map","key","onClick","StyledTaskList","ul","ListItem","li","TaskContent","span","css","toggleDone","shadows","remove","TaskList","useSelector","hidden","Element","div","mobileMax","disabled","Buttons","setDoneButtonInnerText","toggleButtonInnerTextHidden","toggleButtonInnerTextVisible","length","every","SectionContainer","section","HeaderContainer","Header","h2","Section","title","body","extraHeaderContent","EN","headerTitle","sectionTitle","tasksSectionTitle","getExampleTasksButtonText","PL","Tasks","document","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","languageReducer","middleware","run","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e6ba25c7.chunk.js","sourcesContent":["const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport Tasks from './Tasks';\r\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: (state) => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: task }) => {\r\n            const index = tasks.findIndex(({ id }) => id === task);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }, { payload: task }) => {\r\n            tasks.forEach((task, index) => {\r\n                tasks[index].done = true;\r\n            })\r\n        },\r\n        fetchExampleTasks: () => { },\r\n        setTasks: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n        }\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    setTasks\r\n} = tasksSlice.actions;\r\n\r\nexport const selectTasks = state => state.tasks.tasks;\r\nexport const selectHideDone = state => state.tasks.hideDone;\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const FormComponent = styled.form`\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    padding: 10px;\r\n    display: flex;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const FormInput = styled.input`\r\n    border: solid 1px ${({ theme }) => theme.color.borders};\r\n    padding: 10px;\r\n    flex-grow: 1;\r\n    margin: 10px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    display: flex;\r\n    align-content: center;\r\n    justify-content: center;\r\n    color: ${({ theme }) => theme.color.fontLight};\r\n    background-color: ${({ theme }) => theme.color.primary};\r\n    border: none;\r\n    padding: 5px;\r\n    padding: 10px;\r\n    margin: 10px;\r\n    transition: background 0.5s, transform 1s;\r\n\r\n    &:hover {\r\n        filter: brightness(130%);\r\n        transform: scale(1.05);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(160%);\r\n        box-shadow: inset 1px 1px 2px darkgrey;\r\n    }\r\n`;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { FormComponent, FormInput, Button } from \"./styled\";\r\n\r\nconst Form = ({ inputPlaceholder, formButtonInnerText }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const trimmedContent = newTaskContent.trim();\r\n        if (trimmedContent === \"\") {\r\n            setNewTaskContent(\"\");\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: trimmedContent,\r\n            done: false,\r\n            id: nanoid()\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <FormComponent onSubmit={onFormSubmit}>\r\n            <FormInput\r\n                ref={inputRef}\r\n                value={newTaskContent}\r\n                placeholder={inputPlaceholder}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n                autoFocus\r\n            />\r\n            <Button>{formButtonInnerText}</Button>\r\n        </FormComponent>\r\n    )\r\n};\r\n\r\nexport default Form;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst languageSlice = createSlice({\r\n    name: 'languages',\r\n    initialState: {\r\n        language: \"EN\"\r\n    },\r\n    reducers: {\r\n        changeLanguage: (state, { payload: chosenLanguage }) => {\r\n            state.language = chosenLanguage;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { changeLanguage } = languageSlice.actions;\r\nexport const selectLanguage = state => state.languages.language;\r\nexport default languageSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.color.fontDark};\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    font-weight: 700;\r\n    border: solid 1px;\r\n    padding: 5px;\r\n    margin: 5px;\r\n    transition: background 0.5s, transform 1s;\r\n\r\n    &:hover {\r\n        filter: brightness(130%);\r\n        transform: scale(1.05);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(160%);\r\n        box-shadow: inset 1px 1px 2px darkgrey;\r\n    }\r\n`;","import { useDispatch } from \"react-redux\";\r\nimport { changeLanguage } from \"../languageSlice\";\r\nimport { Button } from \"./styled\";\r\n\r\nconst Switcher = ({ descriptions }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div>\r\n            {Object.keys(descriptions).map((key) => (\r\n                <Button\r\n                    key={key}\r\n                    value={key}\r\n                    onClick={() => dispatch(changeLanguage(key))}\r\n                >\r\n                    {key}\r\n                </Button>\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Switcher;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledTaskList = styled.ul`\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    padding: 15px;\r\n    list-style-type: none;\r\n    width: 100%;\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n    display: grid;\r\n    grid-gap: 10px;\r\n    grid-template-columns: auto 1fr auto;\r\n    align-items: center;\r\n    padding: 6px;\r\n    border-style: solid;\r\n    border-width: 0px 0px 1px 0px;\r\n    border-color: ${({ theme }) => theme.color.borders};\r\n`;\r\n\r\nexport const TaskContent = styled.span`\r\n    word-break: break-all;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-content: center;\r\n    color: ${({ theme }) => theme.color.fontLight};\r\n    border: none;\r\n    padding: 5px;\r\n    width: 28px;\r\n    height: 28px;\r\n    transition: 0.5s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.color.toggleDone};\r\n\r\n        &:hover {\r\n            filter: brightness(130%);\r\n        }\r\n\r\n        &:active {\r\n            filter: brightness(160%);\r\n            box-shadow: inset 1px 1px 3px ${({ theme }) => theme.color.shadows};\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.remove};\r\n\r\n        &:hover {\r\n            filter: brightness(130%);\r\n        }\r\n\r\n        &:active {\r\n            filter: brightness(160%);\r\n            box-shadow: inset 1px 1px 3px ${({ theme }) => theme.color.shadows};\r\n        }\r\n    `}\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleTaskDone, removeTask, selectHideDone } from \"../tasksSlice\";\r\nimport { StyledTaskList, ListItem, TaskContent, Button } from \"./styled\";\r\n\r\nconst TaskList = () => {\r\n  const tasks = useSelector(selectTasks);\r\n  const hideDone = useSelector(selectHideDone);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <StyledTaskList>\r\n      {tasks.map(task => (\r\n        <ListItem\r\n          key={task.id}\r\n          hidden={task.done && hideDone}\r\n        >\r\n          <Button\r\n            toggleDone\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n          >\r\n            {task.done ? \"✔\" : \" \"}\r\n          </Button>\r\n          <TaskContent done={task.done}>\r\n            {task.content}\r\n          </TaskContent>\r\n          <Button\r\n            remove\r\n            onClick={() => dispatch(removeTask(task.id))}\r\n          >\r\n            🗑\r\n          </Button>\r\n        </ListItem>\r\n      ))}\r\n    </StyledTaskList>\r\n  )\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const Element = styled.div`\r\n    display: grid;\r\n    gap: 10px;\r\n    grid-template-columns: auto auto;\r\n    \r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.color.primary};\r\n    font-weight: 400;\r\n    background-color: transparent;\r\n    border: none;\r\n    transition: 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.disabled};\r\n        cursor: unset;\r\n    }\r\n`;\r\n\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, setAllDone, selectHideDone } from \"../tasksSlice\";\r\nimport { Element, Button } from \"../styled\";\r\n\r\nconst Buttons = ({\r\n    setDoneButtonInnerText,\r\n    toggleButtonInnerTextHidden,\r\n    toggleButtonInnerTextVisible\r\n}) => {\r\n    const tasks = useSelector(selectTasks);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <Element>\r\n            {tasks.length > 0 && (\r\n                <>\r\n                    <Button onClick={() => dispatch(toggleHideDone())}>\r\n                        {hideDone ? toggleButtonInnerTextHidden : toggleButtonInnerTextVisible}\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={tasks.every(({ done }) => done)}\r\n                    >\r\n                        {setDoneButtonInnerText}\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Element>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const SectionContainer = styled.section`\r\n    margin-bottom: 10px;\r\n`;\r\n\r\nexport const HeaderContainer = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto auto;\r\n    gap: 10px;\r\n    align-items: center;\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    padding-right: 10px;\r\n    margin: 0 0 1px 0;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}) {\r\n        grid-template-columns: 1fr;\r\n        justify-content: center;\r\n    }\r\n`;\r\n\r\nexport const Header = styled.h2`\r\n    background-color: ${({ theme }) => theme.color.background};\r\n    padding: 15px;\r\n    font-weight: 700;\r\n    font-size: 20px;\r\n    margin: 0 0 1px 0;\r\n`;","import { SectionContainer, HeaderContainer, Header } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <SectionContainer>\r\n        <HeaderContainer>\r\n            <Header>\r\n                {title}\r\n            </Header>\r\n            {extraHeaderContent}\r\n        </HeaderContainer>\r\n        {body}\r\n    </SectionContainer>\r\n);\r\n\r\nexport default Section;","const Header = ({ title }) => (\r\n  <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;","const descriptions = {\r\n  EN: {\r\n    headerTitle: \"To-do list\",\r\n    sectionTitle: \"Add new task\",\r\n    tasksSectionTitle: \"List of tasks\",\r\n    inputPlaceholder: \"What are you going to do?\",\r\n    formButtonInnerText: \"Add task\",\r\n    setDoneButtonInnerText: \"Finish all\",\r\n    toggleButtonInnerTextHidden: \"Show done\",\r\n    toggleButtonInnerTextVisible: \"Hide done\",\r\n    getExampleTasksButtonText: \"Get example tasks\"\r\n  },\r\n  PL: {\r\n    headerTitle: \"Lista zadań\",\r\n    sectionTitle: \"Dodaj nowe zadanie\",\r\n    tasksSectionTitle: \"Lista zadań\",\r\n    inputPlaceholder: \"Co jest do zrobienia?\",\r\n    formButtonInnerText: \"Dodaj zadanie\",\r\n    setDoneButtonInnerText: \"Ukończ wszystkie\",\r\n    toggleButtonInnerTextHidden: \"Pokaż ukończone\",\r\n    toggleButtonInnerTextVisible: \"Ukryj ukończone\",\r\n    getExampleTasksButtonText: \"Pobierz przykładowe zadania\"\r\n  }\r\n};\r\n\r\nexport default descriptions;","import Form from \"./Form\";\nimport Switcher from \"../languages/Switcher\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../common/Section\";\nimport Header from '../../common/Header';\nimport descriptions from \"../languages/descriptions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport languageSlice, { selectLanguage } from \"../languages/languageSlice\";\nimport { Button } from \"./styled\";\nimport { fetchExampleTasks } from \"./tasksSlice\";\n\nfunction Tasks() {\n  const language = useSelector(selectLanguage);\n\n  const dispatch = useDispatch();\n\n  document.title = descriptions[language].headerTitle;\n\n  return (\n    <main>\n      <Header title={descriptions[language].headerTitle} />\n      <Section\n        title={descriptions[language].sectionTitle}\n        body={\n          <Form\n            inputPlaceholder={descriptions[language].inputPlaceholder}\n            formButtonInnerText={descriptions[language].formButtonInnerText}\n          />\n        }\n        extraHeaderContent={\n          <>\n            <div>\n              <Button onClick={() => dispatch(fetchExampleTasks())}>\n                {descriptions[language].getExampleTasksButtonText}\n              </Button>\n            </div>\n            <Switcher descriptions={descriptions} />\n          </>\n        }\n      />\n      <Section\n        title={descriptions[language].tasksSectionTitle}\n        body={\n          <TaskList />\n        }\n        extraHeaderContent={\n          <Buttons\n            setDoneButtonInnerText={descriptions[language].setDoneButtonInnerText}\n            toggleButtonInnerTextVisible={descriptions[language].toggleButtonInnerTextVisible}\n            toggleButtonInnerTextHidden={descriptions[language].toggleButtonInnerTextHidden}\n          />\n        }\n      />\n    </main>\n  );\n}\n\nexport default Tasks;","import Tasks from \"./features/tasks/Tasks\";\r\n\r\nconst App = () => <Tasks />;\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\nhtml {\r\n  box-sizing: border-box;\r\n}\r\n\r\n*, ::after, ::before {\r\n  box-sizing: inherit;\r\n}\r\n\r\nbody {\r\n  background-color: #eee;\r\n  max-width: 1024px;\r\n  min-width: 320px;\r\n  margin: 0 auto;\r\n  padding: 10px;\r\n  font-family: 'Montserrat', sans-serif;\r\n  font-size: 14 px;\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n}`;","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todo-list-react/exampleTasks.json\");\r\n\r\n    if(!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { call, put, delay, takeLatest, takeEvery, select } from \"redux-saga/effects\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\nimport { fetchExampleTasks, setTasks, selectTasks } from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\n\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasks));\r\n    } catch (error) {\r\n        yield call(alert, \"Something bad happened!\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport languageReducer from './features/languages/languageSlice';\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n        languages: languageReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(tasksSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Normalize } from \"styled-normalize\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from 'react-redux';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <Normalize />\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    color: {\r\n        primary: \"teal\",\r\n        fontDark: \"#000\",\r\n        background: \"#fff\",\r\n        fontLight: \"#fff\",\r\n        disabled: \"#ccc\",\r\n        borders: \"#ddd\",\r\n        shadows: \"darkgrey\",\r\n        toggleDone: \"forestgreen\",\r\n        remove: \"crimson\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: \"480px\",\r\n        tabletMax: \"768px\",\r\n    },\r\n}"],"sourceRoot":""}