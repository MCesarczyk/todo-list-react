{"version":3,"sources":["App/Form/index.js","App/Switcher/index.js","App/Tasks/styled.js","App/Tasks/index.js","App/Buttons/index.js","App/Section/index.js","App/Header/index.js","App/Container/index.js","App/languages.js","App/App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTask","inputPlaceholder","formButtonInnerText","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trimmedContent","trim","value","placeholder","onChange","target","autoFocus","Switcher","languages","changeLanguage","map","language","onClick","key","TaskList","styled","ul","ListItem","li","hidden","css","TaskContent","span","done","Button","button","toggleDone","remove","Tasks","tasks","hideDone","removeTask","toggleTaskDone","task","id","content","Buttons","toggleHideDone","setAllDone","setDoneButtonInnerText","toggleButtonInnerTextHidden","toggleButtonInnerTextVisible","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","headerTitle","sectionTitle","tasksSectionTitle","App","localStorage","getItem","langId","setLangId","setHideDone","JSON","parse","setTasks","useEffect","setItem","stringify","findIndex","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43478bef.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask, inputPlaceholder, formButtonInnerText }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const trimmedContent = newTaskContent.trim();\r\n        if (trimmedContent === \"\") {\r\n            setNewTaskContent(\"\");\r\n            return;\r\n        }\r\n        addNewTask(trimmedContent);\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={onFormSubmit}>\r\n            <input\r\n                value={newTaskContent}\r\n                className=\"form__input\"\r\n                placeholder={inputPlaceholder}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n                autoFocus\r\n            />\r\n            <button className=\"form__button\">{formButtonInnerText}</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default Form;","const Switcher = ({ languages, changeLanguage }) => (\r\n    <div>\r\n        {languages.map(language => (\r\n            <button\r\n                key={language.key}\r\n                onClick={() => changeLanguage(language.key)}\r\n            >\r\n                {language.key}\r\n            </button>\r\n        ))}\r\n    </div>\r\n);\r\n\r\nexport default Switcher;","import styled, { css } from \"styled-components\";\r\n\r\nexport const TaskList = styled.ul`\r\n    background-color: #fff;\r\n    padding: 15px;\r\n    list-style-type: none;\r\n    width: 100%;\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n    display: grid;\r\n    grid-gap: 10px;\r\n    grid-template-columns: auto 1fr auto;\r\n    align-items: center;\r\n    padding: 6px;\r\n    border-style: solid;\r\n    border-width: 0px 0px 1px 0px;\r\n    border-color: #ddd;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const TaskContent = styled.span`\r\n    word-break: break-all;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-content: center;\r\n    color: #fff;\r\n    border: none;\r\n    padding: 5px;\r\n    width: 28px;\r\n    height: 28px;\r\n    transition: 0.5s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: hsl(137, 85%, 21%);\r\n\r\n        &:hover {\r\n            background-color: hsl(135, 85%, 31%);\r\n        }\r\n\r\n        &:active {\r\n            background-color: hsl(135, 85%, 41%);\r\n            box-shadow: inset 1px 1px 3px darkgrey;\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: crimson;\r\n\r\n        &:hover {\r\n            background-color: hsl(348, 83%, 60%);\r\n        }\r\n\r\n        &:active {\r\n            background-color: hsl(348, 83%, 70%);\r\n            box-shadow: inset 1px 1px 3px darkgrey;\r\n        }\r\n    `}\r\n`;","import { TaskList, ListItem, TaskContent, Button } from \"./styled\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n  <TaskList>\r\n    {tasks.map(task => (\r\n      <ListItem\r\n        key={task.id}\r\n        hidden={task.done && hideDone}\r\n      >\r\n        <Button\r\n          toggleDone\r\n          onClick={() => toggleTaskDone(task.id)}\r\n        >\r\n          {task.done ? \"âœ”\" : \" \"}\r\n        </Button>\r\n        <TaskContent done={task.done}>\r\n          {task.content}\r\n        </TaskContent>\r\n        <Button\r\n          remove\r\n          onClick={() => removeTask(task.id)}\r\n        >\r\n          ðŸ—‘\r\n        </Button>\r\n      </ListItem>\r\n    ))}\r\n  </TaskList>\r\n);\r\n\r\nexport default Tasks;","import \"./style.css\";\r\n\r\nconst Buttons = ({\r\n    tasks,\r\n    hideDone,\r\n    toggleHideDone,\r\n    setAllDone,\r\n    setDoneButtonInnerText,\r\n    toggleButtonInnerTextHidden,\r\n    toggleButtonInnerTextVisible\r\n}) => (\r\n    <div className=\"buttons__element\">\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <button\r\n                    onClick={toggleHideDone}\r\n                    className=\"buttons__button\"\r\n                >\r\n                    {hideDone ? toggleButtonInnerTextHidden : toggleButtonInnerTextVisible}\r\n                </button>\r\n                <button\r\n                    onClick={setAllDone}\r\n                    className=\"buttons__button\"\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                >\r\n                    {setDoneButtonInnerText}\r\n                </button>\r\n            </>\r\n        )}\r\n    </div>\r\n\r\n);\r\n\r\nexport default Buttons;","import \"./style.css\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <section className=\"section\">\r\n        <div className=\"section__headerContainer\">\r\n            <h2 className=\"section__header\">\r\n                {title}\r\n            </h2>\r\n            {extraHeaderContent}\r\n        </div>\r\n        {body}\r\n    </section>\r\n);\r\n\r\nexport default Section;","const Header = ({ title }) => (\r\n  <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import \"./style.css\";\r\n\r\nconst Container = ({ children }) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","const languages = [\r\n  {\r\n    key: \"EN\",\r\n    headerTitle: \"To-do list\",\r\n    sectionTitle: \"Add new task\",\r\n    tasksSectionTitle: \"List of tasks\",\r\n    inputPlaceholder: \"What are you going to do?\",\r\n    formButtonInnerText: \"Add task\",\r\n    setDoneButtonInnerText: \"Finish all\",\r\n    toggleButtonInnerTextHidden: \"Show done\",\r\n    toggleButtonInnerTextVisible: \"Hide done\"\r\n  },\r\n  {\r\n    key: \"PL\",\r\n    headerTitle: \"Lista zadaÅ„\",\r\n    sectionTitle: \"Dodaj nowe zadanie\",\r\n    tasksSectionTitle: \"Lista zadaÅ„\",\r\n    inputPlaceholder: \"Co jest do zrobienia?\",\r\n    formButtonInnerText: \"Dodaj zadanie\",\r\n    setDoneButtonInnerText: \"UkoÅ„cz wszystkie\",\r\n    toggleButtonInnerTextHidden: \"PokaÅ¼ ukoÅ„czone\",\r\n    toggleButtonInnerTextVisible: \"Ukryj ukoÅ„czone\"\r\n  }\r\n];\r\n\r\nexport default languages;","import { useEffect, useState } from 'react';\nimport Form from \"./Form\";\nimport Switcher from \"./Switcher\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from './Header';\nimport Container from \"./Container\";\nimport languages from \"./languages\";\n\nfunction App() {\n  const [langId, setLangId] = useState(localStorage.getItem(\"langId\") || 0);\n\n  const changeLanguage = (key) => {\n    setLangId(languages.findIndex(language => language.key === key));\n  };\n\n  const [hideDone, setHideDone] = useState(false);\n\n  const [tasks, setTasks] = useState(\n    JSON.parse(localStorage.getItem(\"tasks\")\n    ) ||\n    [\n      { id: 1, content: \"task1\", done: false },\n      { id: 2, content: \"task2\", done: true },\n    ]\n  );\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  useEffect(() => {\n    localStorage.setItem(\"langId\", langId);\n  }, [langId]);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n\n      return task;\n    }))\n  };\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task,\n      done: true,\n    })));\n  };\n\n  const addNewTask = (content) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        content,\n        done: false,\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n      },\n    ])\n  };\n\n  return (\n    <Container>\n      <Header title={languages[langId].headerTitle} />\n      <Section\n        title={languages[langId].sectionTitle}\n        body={\n          <Form\n            addNewTask={addNewTask}\n            inputPlaceholder={languages[langId].inputPlaceholder}\n            formButtonInnerText={languages[langId].formButtonInnerText}\n          />\n        }\n        extraHeaderContent={\n          <Switcher\n            languages={languages}\n            changeLanguage={changeLanguage}\n          />\n        }\n      />\n      <Section\n        title={languages[langId].tasksSectionTitle}\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />\n        }\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n            setDoneButtonInnerText={languages[langId].setDoneButtonInnerText}\n            toggleButtonInnerTextVisible={languages[langId].toggleButtonInnerTextVisible}\n            toggleButtonInnerTextHidden={languages[langId].toggleButtonInnerTextHidden}\n          />\n        }\n      />\n    </Container>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}